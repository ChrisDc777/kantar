import {
  Box,
  rem,
  useMantineTheme
} from "@mantine/core";
import React, { useEffect, useState } from 'react';

interface Props {
  size: number;
}

export function useColorCycle() {
  const theme = useMantineTheme();
  const colorsToExclude = ['dark', 'gray', 'green', 'lime', 'red', 'orange', 'yellow', 'pink'];
  const colorKeys = Object.keys(theme.colors).filter(color => 
    !colorsToExclude.includes(color)
  ) as Array<keyof typeof theme.colors>;

  const [colorIndex, setColorIndex] = useState(0);
  
  // Maybe you'll have to use this ref if you want to keep the colorIndex between renders
  // const colorIndexRef = useRef(colorIndex);

  useEffect(() => {
    const interval = setInterval(() => {
      setColorIndex(prev => (prev + 1) % colorKeys.length);
      // colorIndexRef.current = (colorIndexRef.current + 1) % colorKeys.length; // Update the ref
    }, 1000);
    return () => clearInterval(interval);
  }, [colorKeys.length]);

  // const currentColorKey = colorKeys[colorIndexRef.current];
  const currentColorKey = colorKeys[colorIndex];
  const currentColor = theme.colors[currentColorKey][9] || theme.colors.blue[9];

  // theme.colors.

  return { currentColor, currentColorKey };
}

export default function Icon({ size }: Props) {
  const theme = useMantineTheme();
  const { currentColor } = useColorCycle();

  return (
    <Box
      style={{
        backgroundColor: currentColor,
        color: theme.colors.blue[0],
        padding: rem(size / 2),
        borderRadius: theme.radius.md,
        display: "flex",
        alignItems: "center",
        transition: "background-color 2s ease",
      }}
    >
      <svg
        version="1.1"
        xmlns="http://www.w3.org/2000/svg"
        width={size}
        height={size}
        viewBox="0 0 128 128"
      >
        <path
          d="M0 0 C1.59874916 1.28030872 1.59874916 1.28030872 3 3 C3.2964966 6.04590108 3.40957614 8.88727228 3.38818359 11.93432617 C3.39606903 13.30559158 3.39606903 13.30559158 3.40411377 14.70455933 C3.41734289 17.73420179 3.40856168 20.76332069 3.3984375 23.79296875 C3.40045827 25.89944052 3.40336973 28.00591161 3.40713501 30.11238098 C3.41156303 34.53340293 3.40511509 38.95424328 3.39111328 43.37524414 C3.37407362 49.0299776 3.3838265 54.68428225 3.40183067 60.33899975 C3.41270034 64.692868 3.40920665 69.0466356 3.4014473 73.40050697 C3.39945136 75.48441939 3.40188318 77.56834106 3.40888596 79.65224266 C3.41654682 82.57463929 3.40482896 85.49635493 3.38818359 88.41870117 C3.39729263 89.7009684 3.39729263 89.7009684 3.40658569 91.00914001 C3.31842326 99.40913054 1.08623907 105.91376093 -5 112 C-11.58265762 116.63004907 -18.06861592 117.98858226 -26 117 C-34.04677829 114.36886868 -39.53625926 109.81549326 -43.375 102.3125 C-44.75829342 94.98104489 -45.28786796 87.43977314 -41.40234375 80.81640625 C-37.5699977 75.85250399 -33.03333609 71.88822739 -27 70 C-24.0625 69.734375 -24.0625 69.734375 -21 69.75 C-19.4840625 69.74226563 -19.4840625 69.74226563 -17.9375 69.734375 C-15 70 -15 70 -10 72 C-10 60.12 -10 48.24 -10 36 C-15.61 36.99 -21.22 37.98 -27 39 C-31.27140752 39.63516702 -35.53719505 40.25120164 -39.81640625 40.82421875 C-40.92435043 40.97534622 -42.03229462 41.12647369 -43.17381287 41.28218079 C-46.63629123 41.75375696 -50.09937118 42.2207273 -53.5625 42.6875 C-55.94209917 43.01075957 -58.3216568 43.33432514 -60.70117188 43.65820312 C-66.46697445 44.4423248 -72.23327546 45.22268933 -78 46 C-77.99111755 46.79656006 -77.98223511 47.59312012 -77.9730835 48.41381836 C-77.89270596 55.94595805 -77.83191871 63.47788776 -77.79275131 71.01034546 C-77.77193744 74.8822469 -77.7437349 78.75379192 -77.69824219 82.62548828 C-77.65456071 86.36674468 -77.63081633 90.10765974 -77.62049103 93.84915161 C-77.61313936 95.27163053 -77.59878362 96.69409223 -77.57707977 98.11642456 C-77.43456329 107.84921907 -77.95978085 114.06195438 -84.25 121.75 C-90.88432947 127.17808775 -96.22184999 128.68915913 -104.87890625 128.37890625 C-111.10604112 127.62292117 -115.09168975 125.25832866 -119.3125 120.6875 C-123.71537405 115.02494809 -125.61794171 109.70544342 -125.3359375 102.546875 C-124.29391233 94.64687025 -120.43509929 89.58031377 -114.35546875 84.6015625 C-107.91671222 80.22363518 -101.45173305 80.68965973 -94 82 C-93.01 82.33 -92.02 82.66 -91 83 C-90.99635437 82.14222458 -90.99270874 81.28444916 -90.98895264 80.40068054 C-90.95110705 72.32221938 -90.89429391 64.24416334 -90.81609726 56.16598797 C-90.77656502 52.01274203 -90.74440504 47.85970992 -90.72900391 43.70629883 C-90.71387471 39.69897966 -90.67949704 35.69224814 -90.63169098 31.6851902 C-90.61683831 30.155415 -90.60895676 28.62555592 -90.60811615 27.09570885 C-90.60575619 24.95468661 -90.57876027 22.81530138 -90.54589844 20.67456055 C-90.53257477 18.84588692 -90.53257477 18.84588692 -90.51898193 16.98027039 C-90 14 -90 14 -88.2832489 12.14704895 C-85.75958733 10.8792225 -83.71704275 10.37093156 -80.92211914 9.97265625 C-79.90908218 9.8223999 -78.89604523 9.67214355 -77.85231018 9.51733398 C-76.75764938 9.36723877 -75.66298859 9.21714355 -74.53515625 9.0625 C-73.39203476 8.8962915 -72.24891327 8.73008301 -71.07115173 8.55883789 C-67.40309383 8.02815063 -63.73295074 7.51384864 -60.0625 7 C-57.65674598 6.6547245 -55.25114497 6.30838112 -52.84570312 5.9609375 C-48.13322399 5.28214446 -43.41973014 4.61128375 -38.70507812 3.94775391 C-34.39996332 3.34159436 -30.09662492 2.72512685 -25.79492188 2.09521484 C-24.83839218 1.95583496 -23.88186249 1.81645508 -22.89634705 1.67285156 C-21.13752907 1.416109 -19.37900693 1.15732712 -17.62086487 0.89599609 C-4.7737479 -0.96996471 -4.7737479 -0.96996471 0 0 Z "
          fill="#ffffff"
          transform="translate(125,0)"
        />
      </svg>
    </Box>
  );
}
